import 'package:envied/envied.dart';
import 'package:flutter/foundation.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:neroia_app/core/data_sources/local/secure_storage.dart';
import 'package:neroia_app/core/data_sources/reporting/logger.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'environment_config.freezed.dart';
part 'environment_config.g.dart';

enum EnvironmentType {
  dev(description: 'Only for testing purposes', disabled: false),
  staging(description: 'Staging environment', disabled: false),
  prod(description: 'Production environment', disabled: true);

  final String description;
  final bool disabled;

  const EnvironmentType({required this.description, required this.disabled});

  static EnvironmentType get defaultEnv => kDebugMode ? EnvironmentType.dev : EnvironmentType.staging;
}

@Riverpod(keepAlive: true)
class Env extends _$Env {
  EnvironmentType? env;
  final _logger = AppLogger('Env');

  Future<void> initialize() async {
    env = await ref.read(secureStorageProvider.notifier).readEnv();
    state = build();

    _logger.info('Current: ${env?.name}');
  }

  EnvironmentConfig build() => switch (env ?? EnvironmentType.defaultEnv) {
    EnvironmentType.dev => EnvironmentConfig(logLevel: _Env.devLogLevel, type: EnvironmentType.dev),
    EnvironmentType.staging => EnvironmentConfig(logLevel: _Env.stagingLogLevel, type: EnvironmentType.staging),
    EnvironmentType.prod => EnvironmentConfig(logLevel: _Env.prodLogLevel, type: EnvironmentType.prod),
  };

  Future<void> update(EnvironmentType env) async {
    this.env = env;
    state = build();

    _logger.info('Updated: ${env.name}');
    await ref.read(secureStorageProvider.notifier).updateEnv(env);
  }
}

@freezed
abstract class EnvironmentConfig with _$EnvironmentConfig {
  const factory EnvironmentConfig({required String logLevel, required EnvironmentType type}) = _EnvironmentConfig;
}

/**
 * Helper class to access the environment variables.
 * This is generated by the envied package and only used in this file.
 */

final String sentryDsn = _Env.sentryDsn;
final String postHogKey = _Env.postHogKey;
final String userCentricsId = _Env.userCentricsId;
final String firebaseApiKeyIos = _Env.firebaseApiKeyIos;
final String firebaseApiKeyAndroid = _Env.firebaseApiKeyAndroid;

@Envied(name: 'Envied')
abstract class _Env {
  @EnviedField(varName: 'SENTRY_DSN', obfuscate: true)
  static String sentryDsn = _Envied.sentryDsn;

  @EnviedField(varName: 'USERCENTRICS_ID', obfuscate: true)
  static String userCentricsId = _Envied.userCentricsId;

  @EnviedField(varName: 'POSTHOG_KEY', obfuscate: true)
  static String postHogKey = _Envied.postHogKey;

  @EnviedField(varName: 'FIREBASE_API_KEY_IOS', obfuscate: true)
  static String firebaseApiKeyIos = _Envied.firebaseApiKeyIos;

  @EnviedField(varName: 'FIREBASE_API_KEY_ANDROID', obfuscate: true)
  static String firebaseApiKeyAndroid = _Envied.firebaseApiKeyAndroid;

  // DEV
  @EnviedField(varName: 'DEV_LOG_LEVEL', obfuscate: true)
  static String devLogLevel = _Envied.devLogLevel;

  // STAGING
  @EnviedField(varName: 'STAGING_LOG_LEVEL', obfuscate: true)
  static String stagingLogLevel = _Envied.stagingLogLevel;

  // PROD
  @EnviedField(varName: 'PROD_LOG_LEVEL', obfuscate: true)
  static String prodLogLevel = _Envied.prodLogLevel;
}
